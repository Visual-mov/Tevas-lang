           -- Tevas Formal Grammer --

* - Zero or more times
? - Optional
{} - Keyword
'' - Character/String
-----------------------------------------------

program     := (statement)* EOF
block_stmt  := (statement)* {end}
statement   := assignment
             | print_stmt
             | if_stmt
             | while_stmt
             | func_def_stmt
             | func_call_stmt
             | return_stmt
             | {continue} | {break}

print_stmt  := {print} l_expr | {println} l_expr

if_stmt     := {check} '[' l_expr ']' ':' block_stmt ifelse_stmt* else_stmt?
ifelse_stmt := {celse} '[' l_expr ']' ':' block_stmt 
else_stmt   := {else} ':'  block_stmt 
while_stmt  := {while} '[' l_expr ']' ':' block_stmt
return_stmt := {return} (cmpnd_expr | IDENTIFIER)

func_def_stmt  := {fun} IDENTIFIER '[' arguments ']:' block_stmt
func_call_stmt := IDENTIFIER '[' arguments? ']'
arguments := IDENTIFIER (',' IDENTIFIER)*

assignment  := cmpnd_expr '->' IDENTIFIER

cmpnd_expr  := l_expr (('&&' | '||') l_expr)*
l_expr      := a_expr (('=' | '<=' | '>=' | '>' | '<' | '!=') a_expr)* | '!' l_expr
a_expr      := term ((+ | -) term)*
term        := factor ((* | / | %) factor)*
factor      := NUMBER
             | IDENTIFIER
             | STRING
             | {true} | {false}
             | (- | +) factor
             | '(' expr ')'


arr_def := '[' arguments ']'